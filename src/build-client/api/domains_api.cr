# #Build.io API V1
#
##No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
#The version of the OpenAPI document: v1
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "uri"

module Build
  class DomainsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # clear all domains
    # Clear all custom domains from an app
    # @param app_id_or_name [String] app id or name
    # @return [nil]
    def clear_domains(app_id_or_name : String)
      clear_domains_with_http_info(app_id_or_name)
      nil
    end

    # clear all domains
    # Clear all custom domains from an app
    # @param app_id_or_name [String] app id or name
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clear_domains_with_http_info(app_id_or_name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DomainsApi.clear_domains ..."}
      end
      # verify the required parameter "app_id_or_name" is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        raise ArgumentError.new("Missing the required parameter 'app_id_or_name' when calling DomainsApi.clear_domains")
      end
      # resource path
      local_var_path = "/api/v1/apps/{app_id_or_name}/domains".sub("{" + "app_id_or_name" + "}", URI.encode_path(app_id_or_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["bearer", "oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DomainsApi.clear_domains",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DomainsApi#clear_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # create domain
    # Add a domain to an app
    # @param app_id_or_name [String] app id or name
    # @return [Domain]
    def create_domain(app_id_or_name : String, create_domain_request : CreateDomainRequest? = nil)
      data, _status_code, _headers = create_domain_with_http_info(app_id_or_name, create_domain_request)
      data
    end

    # create domain
    # Add a domain to an app
    # @param app_id_or_name [String] app id or name
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    def create_domain_with_http_info(app_id_or_name : String, create_domain_request : CreateDomainRequest? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DomainsApi.create_domain ..."}
      end
      # verify the required parameter "app_id_or_name" is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        raise ArgumentError.new("Missing the required parameter 'app_id_or_name' when calling DomainsApi.create_domain")
      end
      # resource path
      local_var_path = "/api/v1/apps/{app_id_or_name}/domains".sub("{" + "app_id_or_name" + "}", URI.encode_path(app_id_or_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_domain_request.to_json

      # return_type
      return_type = "Domain"

      # auth_names
      auth_names = ["bearer", "oauth2"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DomainsApi.create_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DomainsApi#create_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Domain.from_json(data), status_code, headers
    end

    # list domains
    # List all domains for an app (platform domain + custom domains)
    # @param app_id_or_name [String] app id or name
    # @return [Array(Domain)]
    def list_domains(app_id_or_name : String)
      data, _status_code, _headers = list_domains_with_http_info(app_id_or_name)
      data
    end

    # list domains
    # List all domains for an app (platform domain + custom domains)
    # @param app_id_or_name [String] app id or name
    # @return [Array<(Array(Domain), Integer, Hash)>] Array(Domain) data, response status code and response headers
    def list_domains_with_http_info(app_id_or_name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DomainsApi.list_domains ..."}
      end
      # verify the required parameter "app_id_or_name" is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        raise ArgumentError.new("Missing the required parameter 'app_id_or_name' when calling DomainsApi.list_domains")
      end
      # resource path
      local_var_path = "/api/v1/apps/{app_id_or_name}/domains".sub("{" + "app_id_or_name" + "}", URI.encode_path(app_id_or_name.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Domain)"

      # auth_names
      auth_names = ["bearer", "oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DomainsApi.list_domains",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DomainsApi#list_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Domain).from_json(data), status_code, headers
    end

    # remove domain
    # Remove a domain from an app
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @return [nil]
    def remove_domain(app_id_or_name : String, domain_id : String)
      remove_domain_with_http_info(app_id_or_name, domain_id)
      nil
    end

    # remove domain
    # Remove a domain from an app
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_domain_with_http_info(app_id_or_name : String, domain_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DomainsApi.remove_domain ..."}
      end
      # verify the required parameter "app_id_or_name" is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        raise ArgumentError.new("Missing the required parameter 'app_id_or_name' when calling DomainsApi.remove_domain")
      end
      # verify the required parameter "domain_id" is set
      if @api_client.config.client_side_validation && domain_id.nil?
        raise ArgumentError.new("Missing the required parameter 'domain_id' when calling DomainsApi.remove_domain")
      end
      # resource path
      local_var_path = "/api/v1/apps/{app_id_or_name}/domains/{domain_id}".sub("{" + "app_id_or_name" + "}", URI.encode_path(app_id_or_name.to_s)).sub("{" + "domain_id" + "}", URI.encode_path(domain_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["bearer", "oauth2"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DomainsApi.remove_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DomainsApi#remove_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # show domain
    # Get detailed information about a specific domain
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @return [Domain]
    def show_domain(app_id_or_name : String, domain_id : String)
      data, _status_code, _headers = show_domain_with_http_info(app_id_or_name, domain_id)
      data
    end

    # show domain
    # Get detailed information about a specific domain
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    def show_domain_with_http_info(app_id_or_name : String, domain_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DomainsApi.show_domain ..."}
      end
      # verify the required parameter "app_id_or_name" is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        raise ArgumentError.new("Missing the required parameter 'app_id_or_name' when calling DomainsApi.show_domain")
      end
      # verify the required parameter "domain_id" is set
      if @api_client.config.client_side_validation && domain_id.nil?
        raise ArgumentError.new("Missing the required parameter 'domain_id' when calling DomainsApi.show_domain")
      end
      # resource path
      local_var_path = "/api/v1/apps/{app_id_or_name}/domains/{domain_id}".sub("{" + "app_id_or_name" + "}", URI.encode_path(app_id_or_name.to_s)).sub("{" + "domain_id" + "}", URI.encode_path(domain_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Domain"

      # auth_names
      auth_names = ["bearer", "oauth2"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DomainsApi.show_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DomainsApi#show_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Domain.from_json(data), status_code, headers
    end

    # update domain
    # Update a domain (e.g., change SSL certificate)
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @return [Domain]
    def update_domain(app_id_or_name : String, domain_id : String, update_domain_request : UpdateDomainRequest? = nil)
      data, _status_code, _headers = update_domain_with_http_info(app_id_or_name, domain_id, update_domain_request)
      data
    end

    # update domain
    # Update a domain (e.g., change SSL certificate)
    # @param app_id_or_name [String] app id or name
    # @param domain_id [String] domain id or hostname
    # @return [Array<(Domain, Integer, Hash)>] Domain data, response status code and response headers
    def update_domain_with_http_info(app_id_or_name : String, domain_id : String, update_domain_request : UpdateDomainRequest? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: DomainsApi.update_domain ..."}
      end
      # verify the required parameter "app_id_or_name" is set
      if @api_client.config.client_side_validation && app_id_or_name.nil?
        raise ArgumentError.new("Missing the required parameter 'app_id_or_name' when calling DomainsApi.update_domain")
      end
      # verify the required parameter "domain_id" is set
      if @api_client.config.client_side_validation && domain_id.nil?
        raise ArgumentError.new("Missing the required parameter 'domain_id' when calling DomainsApi.update_domain")
      end
      # resource path
      local_var_path = "/api/v1/apps/{app_id_or_name}/domains/{domain_id}".sub("{" + "app_id_or_name" + "}", URI.encode_path(app_id_or_name.to_s)).sub("{" + "domain_id" + "}", URI.encode_path(domain_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_domain_request.to_json

      # return_type
      return_type = "Domain"

      # auth_names
      auth_names = ["bearer", "oauth2"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"DomainsApi.update_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DomainsApi#update_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Domain.from_json(data), status_code, headers
    end
  end
end
