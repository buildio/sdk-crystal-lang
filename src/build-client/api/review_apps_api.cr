# #Build.io API V1
#
##No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
#The version of the OpenAPI document: v1
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.11.0
#

require "uri"

module Build
  class ReviewAppsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create a review app
    # Creates a new review app for a pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @return [App]
    def create_review_app(pipeline_id : String, create_review_app_request : CreateReviewAppRequest?)
      data, _status_code, _headers = create_review_app_with_http_info(pipeline_id, create_review_app_request)
      data
    end

    # create a review app
    # Creates a new review app for a pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def create_review_app_with_http_info(pipeline_id : String, create_review_app_request : CreateReviewAppRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReviewAppsApi.create_review_app ..."}
      end
      # verify the required parameter "pipeline_id" is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline_id' when calling ReviewAppsApi.create_review_app")
      end
      # resource path
      local_var_path = "/api/v1/pipelines/{pipeline_id}/review-apps".sub("{" + "pipeline_id" + "}", URI.encode_path(pipeline_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_review_app_request.to_json

      # return_type
      return_type = "App"

      # auth_names
      auth_names = ["bearer"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReviewAppsApi.create_review_app",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReviewAppsApi#create_review_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return App.from_json(data), status_code, headers
    end

    # delete a review app
    # Deletes a specific review app.
    # @param id [String] Review App ID
    # @return [nil]
    def delete_review_app(id : String)
      delete_review_app_with_http_info(id)
      nil
    end

    # delete a review app
    # Deletes a specific review app.
    # @param id [String] Review App ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_review_app_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReviewAppsApi.delete_review_app ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ReviewAppsApi.delete_review_app")
      end
      # resource path
      local_var_path = "/api/v1/review-apps/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["bearer"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ReviewAppsApi.delete_review_app",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReviewAppsApi#delete_review_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # get a specific review app
    # Retrieves details for a specific review app.
    # @param id [String] Review App ID
    # @return [App]
    def get_review_app(id : String)
      data, _status_code, _headers = get_review_app_with_http_info(id)
      data
    end

    # get a specific review app
    # Retrieves details for a specific review app.
    # @param id [String] Review App ID
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def get_review_app_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReviewAppsApi.get_review_app ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ReviewAppsApi.get_review_app")
      end
      # resource path
      local_var_path = "/api/v1/review-apps/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "App"

      # auth_names
      auth_names = ["bearer"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReviewAppsApi.get_review_app",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReviewAppsApi#get_review_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return App.from_json(data), status_code, headers
    end

    # get review app by its app id
    # Retrieves details for a specific review app using its app ID.
    # @param app_id [String] App ID of the review app
    # @return [App]
    def get_review_app_by_app_id(app_id : String)
      data, _status_code, _headers = get_review_app_by_app_id_with_http_info(app_id)
      data
    end

    # get review app by its app id
    # Retrieves details for a specific review app using its app ID.
    # @param app_id [String] App ID of the review app
    # @return [Array<(App, Integer, Hash)>] App data, response status code and response headers
    def get_review_app_by_app_id_with_http_info(app_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReviewAppsApi.get_review_app_by_app_id ..."}
      end
      # verify the required parameter "app_id" is set
      if @api_client.config.client_side_validation && app_id.nil?
        raise ArgumentError.new("Missing the required parameter 'app_id' when calling ReviewAppsApi.get_review_app_by_app_id")
      end
      # resource path
      local_var_path = "/api/v1/apps/{app_id}/review-apps".sub("{" + "app_id" + "}", URI.encode_path(app_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "App"

      # auth_names
      auth_names = ["bearer"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReviewAppsApi.get_review_app_by_app_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReviewAppsApi#get_review_app_by_app_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return App.from_json(data), status_code, headers
    end

    # list review apps for a pipeline
    # Lists all review apps for a given pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @return [Array(App)]
    def list_review_apps(pipeline_id : String)
      data, _status_code, _headers = list_review_apps_with_http_info(pipeline_id)
      data
    end

    # list review apps for a pipeline
    # Lists all review apps for a given pipeline.
    # @param pipeline_id [String] Pipeline ID
    # @return [Array<(Array(App), Integer, Hash)>] Array(App) data, response status code and response headers
    def list_review_apps_with_http_info(pipeline_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReviewAppsApi.list_review_apps ..."}
      end
      # verify the required parameter "pipeline_id" is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline_id' when calling ReviewAppsApi.list_review_apps")
      end
      # resource path
      local_var_path = "/api/v1/pipelines/{pipeline_id}/review-apps".sub("{" + "pipeline_id" + "}", URI.encode_path(pipeline_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(App)"

      # auth_names
      auth_names = ["bearer"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReviewAppsApi.list_review_apps",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReviewAppsApi#list_review_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(App).from_json(data), status_code, headers
    end
  end
end
