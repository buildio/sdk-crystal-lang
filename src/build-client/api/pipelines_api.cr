# #Build.io API V1
#
##No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
#The version of the OpenAPI document: v1
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.11.0
#

require "uri"

module Build
  class PipelinesApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # get a specific pipeline
    # Retrieves details for a specific pipeline
    # @param id [String] Pipeline ID
    # @return [Pipeline]
    def get_pipeline(id : String)
      data, _status_code, _headers = get_pipeline_with_http_info(id)
      data
    end

    # get a specific pipeline
    # Retrieves details for a specific pipeline
    # @param id [String] Pipeline ID
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def get_pipeline_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PipelinesApi.get_pipeline ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling PipelinesApi.get_pipeline")
      end
      # resource path
      local_var_path = "/api/v1/pipelines/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Pipeline"

      # auth_names
      auth_names = ["bearer"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PipelinesApi.get_pipeline",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PipelinesApi#get_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Pipeline.from_json(data), status_code, headers
    end

    # list pipelines
    # Lists all pipelines accessible to the current user
    # @return [Array(Pipeline)]
    def list_pipelines()
      data, _status_code, _headers = list_pipelines_with_http_info()
      data
    end

    # list pipelines
    # Lists all pipelines accessible to the current user
    # @return [Array<(Array(Pipeline), Integer, Hash)>] Array(Pipeline) data, response status code and response headers
    def list_pipelines_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PipelinesApi.list_pipelines ..."}
      end
      # resource path
      local_var_path = "/api/v1/pipelines"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Pipeline)"

      # auth_names
      auth_names = ["bearer"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PipelinesApi.list_pipelines",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PipelinesApi#list_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Pipeline).from_json(data), status_code, headers
    end
  end
end
